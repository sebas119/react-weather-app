{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kPASeA,EAPA,kBACX,6BACI,wBAAIC,UAAU,0BAAd,kBACA,uBAAGA,UAAU,6BAAb,iDCMOC,EARF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,YACV,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDC6BDC,EAjCC,SAACN,GACb,OACI,yBAAKF,UAAU,iBAEPE,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,gBAAb,YAC3B,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMO,KAAzC,KAAiDP,EAAMQ,UAI3DR,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,eACjB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMS,cAI7CT,EAAMU,UAAY,uBAAGZ,UAAU,gBAAb,YACd,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMU,WAI7CV,EAAMW,aAAe,uBAAGb,UAAU,gBAAb,cACjB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMW,cAI7CX,EAAMY,OAAS,uBAAGd,UAAU,kBACvBE,EAAMY,SCtBrBC,EAAU,mCAqEDC,E,4MAlEdC,MAAQ,CACPN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAERd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,yDACZD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,OACtCf,IAAQC,EAJA,iCAKYe,MAAM,qDAAD,OAAsDhB,EAAtD,YAA8DC,EAA9D,kBAA+EK,EAA/E,kBALjB,cAKLW,EALK,gBAMQA,EAASC,OANjB,OAMLC,EANK,OAOX,EAAKC,SAAS,CACblB,YAAaiB,EAAKE,KAAKC,KACvBtB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKI,IAAItB,QAClBE,SAAUgB,EAAKE,KAAKlB,SACpBC,YAAae,EAAKK,QAAQ,GAAGpB,YAC7BC,MAAO,KAbG,wBAgBX,EAAKe,SAAS,CACblB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,4BAtBG,4C,6GA4BZ,OACC,6BACC,yBAAKd,UAAU,WACd,yBAAKA,UAAU,QACd,yBAAKA,UAAU,mBACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,8CACd,kBAAC,EAAD,OAED,yBAAKA,UAAU,6CACd,kBAAC,EAAD,CAAMI,WAAY8B,KAAK9B,aACvB,kBAAC,EAAD,CACCO,YAAauB,KAAKjB,MAAMN,YACxBF,KAAMyB,KAAKjB,MAAMR,KACjBC,QAASwB,KAAKjB,MAAMP,QACpBE,SAAUsB,KAAKjB,MAAML,SACrBC,YAAaqB,KAAKjB,MAAMJ,YACxBC,MAAOoB,KAAKjB,MAAMH,kB,GAtDVqB,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMyC,a","file":"static/js/main.943a742f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n    <div>\n        <h1 className=\"title-container__title\">Weather Finder</h1>\n        <p className=\"title-container__subtitle\">Find out temperture, conditions and more...</p>\n    </div>\n);\n\nexport default Titles;","import React from \"react\"\n\n\nconst Form = props => (\n    <form onSubmit={props.getWeather}>\n                <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n                <button>Get Weather</button>\n    </form>\n);\n\nexport default Form;","import React from \"react\"\n\n\nconst Weather = (props) => {\n    return (\n        <div className=\"weather__info\">\n            {\n                props.city && props.country && <p className=\"weather__key\">Location:\n                    <span className=\"weather__value\"> {props.city}, {props.country}</span>\n                </p>\n            }\n            {\n                props.temperature && <p className=\"weather__key\">Temperature:\n                    <span className=\"weather__value\"> {props.temperature}</span>\n                </p>\n            }\n            {\n                props.humidity && <p className=\"weather__key\">Humidity:\n                    <span className=\"weather__value\"> {props.humidity}</span>\n                </p>\n            }\n            {\n                props.description && <p className=\"weather__key\">Conditions:\n                    <span className=\"weather__value\"> {props.description}</span>\n                </p>\n            }\n            {\n                props.error && <p className=\"weather__error\">\n                    {props.error}\n                </p>\n            }\n        </div>\n    );\n}\n\n\nexport default Weather;","import React from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"ea97190a253a3b910afa53a3da95bde6\"\n\nclass App extends React.Component {\n\tstate = {\n\t\ttemperature: undefined,\n\t\tcity: undefined,\n\t\tcountry: undefined,\n\t\thumidity: undefined,\n\t\tdescription: undefined,\n\t\terror: undefined,\n\t}\n\tgetWeather = async (e) => {\n\t\te.preventDefault();\n\t\tconst city = e.target.elements.city.value;\n\t\tconst country = e.target.elements.country.value;\n\t\tif (city && country) {\n\t\t\tconst api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`);\n\t\t\tconst data = await api_call.json();\n\t\t\tthis.setState({\n\t\t\t\ttemperature: data.main.temp,\n\t\t\t\tcity: data.name,\n\t\t\t\tcountry: data.sys.country,\n\t\t\t\thumidity: data.main.humidity,\n\t\t\t\tdescription: data.weather[0].description,\n\t\t\t\terror: \"\"\n\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\ttemperature: undefined,\n\t\t\t\tcity: undefined,\n\t\t\t\tcountry: undefined,\n\t\t\t\thumidity: undefined,\n\t\t\t\tdescription: undefined,\n\t\t\t\terror: \"Please enter the value.\"\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t<div className=\"main\">\n\t\t\t\t\t\t<div className=\"container-fluid\">\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-5 col-md-4 col-xl-4 title-container\">\n\t\t\t\t\t\t\t\t\t<Titles />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-7 col-md-5 col-xl-8 form-container\">\n\t\t\t\t\t\t\t\t\t<Form getWeather={this.getWeather} />\n\t\t\t\t\t\t\t\t\t<Weather\n\t\t\t\t\t\t\t\t\t\ttemperature={this.state.temperature}\n\t\t\t\t\t\t\t\t\t\tcity={this.state.city}\n\t\t\t\t\t\t\t\t\t\tcountry={this.state.country}\n\t\t\t\t\t\t\t\t\t\thumidity={this.state.humidity}\n\t\t\t\t\t\t\t\t\t\tdescription={this.state.description}\n\t\t\t\t\t\t\t\t\t\terror={this.state.error}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}